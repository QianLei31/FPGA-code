// test CMD input 
  /******************************************************************
   *                  AFE function test                             *
  ******************************************************************/
  // code=4; write rec
  000100_00000010_10_0000_0_0_000_1_1_1111_0 // test[0]: default value;
  000100_00000010_10_0000_1_0_000_1_1_1111_0 // test[1]: remove reset for BLOCK2-CH2;
  000100_00000010_00_0000_0_0_000_0_0_1110_0 // test[2]: set BLOCK2-CH0, EN_HP 0, EN_GAIN 0;
  000100_00000010_01_0000_0_0_000_0_1_1101_0 // test[3]: set BLOCK2-CH1, EN_HP 0, EN_GAIN 1;

  000100_00000011_11_0000_0_0_000_0_1_1111_0 // test[4]: change reg_map addr, test reg_map_addr;
  // code=7; global AFE reset
  000111_00010010_00_0000_1_0_000_1_1_1001_0 // test[5]: just CMD high 6 bit valid
  // code=8; remove global AFE reset
  001000_00111111_01_0000_1_0_000_1_1_1001_0 // test[6]: just CMD high 6 bit valid

  /******************************************************************
   *                  DAC function test                             *
  ******************************************************************/
  // code=6; write stim
  //6+BLOCK_ADDER[7:0]+CB_Logic_addr[1:0]+OFF_STIM+CH[1:0]+AMP_X50+comp_en+Pol+AMP
  000110_00000010_10_0_01_1_1_00_100000000 // test[7]: BLOCK2-CH2-ELE1, compensate first
  000110_00000010_10_0_01_1_0_01_101000000 // test[8]: BLOCK2-CH2-ELE1, stim negedge, AMP*50
  000110_00000010_10_0_01_1_0_00_101000000 // test[9]: BLOCK2-CH2-ELE1, output 0, AMP*50
  000110_00000010_10_0_01_1_0_10_101000000 // test[10]: BLOCK2-CH2-ELE1, stim posedge, AMP*50

  000110_00000010_10_0_01_1_1_00_010000000 // test[11]: BLOCK2-CH2-ELE1, compensate after first stim
  000110_00000010_10_0_01_0_0_01_101000000 // test[12]: BLOCK2-CH2-ELE1, stim negedge, AMP*0.5
  000110_00000010_10_0_01_0_0_00_101000000 // test[13]: BLOCK2-CH2-ELE1, output 0, AMP*0.5
  000110_00000010_10_0_01_0_0_10_101000000 // test[14]: BLOCK2-CH2-ELE1, stim posedge, AMP*0.5

  /******************************************************************
   *                  ELEC function test  NeuralPixel               *
  ******************************************************************/
  001010_0000011111_11100100_00000000      // test[15]: BLOCK ELE WRITE MUX,11_10_01_00 NeuralPixel
  001011_0000011111_11100100_00000000      // test[16]: BLOCK ELE READ MUX              NeuralPixel

// add

  000100_00000010_10_0000_0_0_000_1_0_1011_0 // test[17]: set BLOCK2-CH2, EN_HP 1, EN_GAIN 0;
  000100_00000010_11_0000_0_0_000_1_1_1000_0 // test[18]: set BLOCK2-CH3, EN_HP 1, EN_GAIN 1;

  010010_00000000_00_00000_0_0_000_0_0_0000 // test[19]: Set CB_OK Low;

  /******************************************************************
  *                  ELEC function test  NeuralLink                 *
  ******************************************************************/
  010000_0000001000_00000000_11100100      // test[20]: BLOCK ELE WRITE MUX,11_10_01_00 NeuralLink
  010001_0000001000_00000000_00000000      // test[21]: BLOCK ELE READ MUX              NeuralLink
